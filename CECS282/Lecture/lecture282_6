longlong : 64 bits
1.9*10^19
__________________________________________________
#include <vector>
#include <algorithm>
useing namespace std;
int main()
{
    vector<int>::iterator it;//smart pointer
    vector <int> v;//can put any type in it | v{}
    v.push_back(3);// v{3};
    v.push_back(7);//v{3,7}
    v.push_back(9);//v{3,7,9}
    v.push_back(2);//v{3,7,9,2}
    it = v.begin();//it will be the beginning of the vector : 3 
    while(it < v.end())//can't rely on < sign have to use !=
}

char c = 65;
char a = 'A'
cout << c; // 'A' prints out
cout << (int)a; // type cast a 

char digit = 3;
cout << (int)digit; 
__________________________________________________

operator + (BigInt) returns a BigInt

BigInt A, B(20), C(30);
A = B + C; // gives 50
#ifndef BIGINT_H
#define BIGINT_H

class BigInt
{
    private:
        vector<char> storage;

    public:
        BigInt(int x);//overloaded constructor
        BigInt();
        BigInt(string x);//something thats a big int
        void showStorage();
};

#endif

int main()
{
    BigInt A(32);
    A.showStorage();//prints 032 because positive numbers will always have a 0 in front
    cout<<A;
}


BigInt(int n)
{
    char digit;
    while(n >=0)//n = 36492
    {
        digit = n % 10;
        storage.push_back(digit);//pushing digit into char array
        n/=10
        // stored as 2,9,4,6,3,0 in vector
    }
    reverse(storage.begin(),storage.end());//returns 036493
}